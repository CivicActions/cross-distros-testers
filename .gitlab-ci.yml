stages:
  - validate
  - update
  - build
  - register
  - destroy

default:
  before_script:
    - vagrant plugin install --local
  tags:
    - vagrant

.matrix_template: &matrix_definition
  matrix:
    # To update list, run:
    # vagrant status --machine-readable | awk 'BEGIN { FS = "," } ; { if ($3 == "metadata") { print "  - " $2 }}'
    - name: ubuntu1804distro
    - name: ubuntu1804upstream
    - name: ubuntu2004distro
    - name: ubuntu2004upstream
    - name: rhel7distro
    - name: rhel7upstream
    - name: rhel8distro
    - name: rhel8upstream
    - name: centos7distro
    - name: centos7upstream
    - name: centos8distro
    - name: centos8upstream
    - name: archdistro
    - name: windows_server
    - name: windows_10

validate:
  stage: validate
  script:
    - vagrant validate

update:
  stage: update
  script:
    - vagrant box update

build:
  stage: build
  script:
    # We build one at a time, since we have limited memory.
    - vagrant up --provision "${name}"
    - vagrant halt "${name}"
  parallel:
    <<: *matrix_definition
  when: manual
  only:
    - master

register:
  stage: register
  script:
    - sudo gitlab-runner unregister --name "${name}" || true
    - sudo gitlab-runner register --name "${name}" --builds-dir "${HOME}/builds-${name}" --executor virtualbox --virtualbox-base-name "${name}" --tag-list "cross-distros-testers,${name}"
  parallel:
    <<: *matrix_definition
  when: manual
  only:
    - master

destroy:
  stage: destroy
  script:
    - vagrant destroy --force "${name}"
  parallel:
    <<: *matrix_definition
  when: manual
  only:
    - master

destroyall:
  stage: destroy
  script:
    - |
      while read -r name; do
        echo "Destroying Vagrant ${name}"
        vagrant destroy --force "${name}"
      done <<< $(vagrant status --machine-readable | awk 'BEGIN { FS = "," } ; { if ($3 == "metadata") { print $2 }}')
    - sleep 30
    # Clean up any VMs that Vagrant lost
    - |
      while read -r name; do
        echo "Destroying VM ${name}"
        vboxmanage unregistervm --delete "${name}" || true
      done <<< $(vboxmanage list vms | cut -d'"' -f2)
    # Clean up an VMs that VirtualBox lost
    - killall -9 VBoxHeadless || true
    # Deleting any remaining VM state
    - rm -rf ~/Virtualbox\ VMs/*
  when: manual
  only:
    - master
