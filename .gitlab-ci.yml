stages:
  - validate
  - build
  - destroy

default:
  before_script:
    - vagrant plugin install --local
  tags:
    - vagrant

validate:
  stage: validate
  script:
    - vagrant validate

build:
  stage: build
  script:
    # We build one at a time, since we have limited memory.
    - vagrant up --provision "${name}"
    - vagrant halt "${name}"
    # TODO: Register runner here
  parallel:
    matrix:
      # To update list, run:
      # vagrant status --machine-readable | awk 'BEGIN { FS = "," } ; { if ($3 == "metadata") { print "        - " $2 }}'
      - name: ubuntu1804distro
      - name: ubuntu1804upstream
      - name: ubuntu2004distro
      - name: ubuntu2004upstream
      - name: rhel7distro
      - name: rhel7upstream
      - name: rhel8distro
      - name: rhel8upstream
      - name: centos7distro
      - name: centos7upstream
      - name: centos8distro
      - name: centos8upstream
      - name: archdistro
      - name: windows_server
      - name: windows_10
  when: manual
  only:
    - master

destroy:
  stage: destroy
  script:
    - vagrant destroy --force "${name}"
  parallel:
    matrix:
      # To update list, run:
      # vagrant status --machine-readable | awk 'BEGIN { FS = "," } ; { if ($3 == "metadata") { print "        - " $2 }}'
      - name: ubuntu1804distro
      - name: ubuntu1804upstream
      - name: ubuntu2004distro
      - name: ubuntu2004upstream
      - name: rhel7distro
      - name: rhel7upstream
      - name: rhel8distro
      - name: rhel8upstream
      - name: centos7distro
      - name: centos7upstream
      - name: centos8distro
      - name: centos8upstream
      - name: archdistro
      - name: windows_server
      - name: windows_10
  when: manual
  only:
    - master

destroyall:
  stage: destroy
  script:
    - |
      while read -r name; do
        echo "Destroying Vagrant ${name}"
        vagrant destroy --force "${name}"
      done <<< $(vagrant status --machine-readable | awk 'BEGIN { FS = "," } ; { if ($3 == "metadata") { print $2 }}')
    - sleep 30
    - |
      while read -r name; do
        echo "Destroying VM ${name}"
        vboxmanage unregistervm --delete "${name}"
      done <<< $(vboxmanage list vms | cut -d'"' -f2)
  when: manual
  only:
    - master
